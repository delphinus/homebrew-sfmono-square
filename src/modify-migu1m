#!/usr/local/opt/python@2/bin/python
import sys

import fontforge
import psMat


ASCENT = 1638
DESCENT = 410
OLD_EM = 1000
EM = ASCENT + DESCENT
SCALE_DOWN = 0.82
X_TO_CENTER = EM * (1 - SCALE_DOWN) / 2
HANKAKU_KANA = (0xff60, 0xff9f)


def read_opts():
    if len(sys.argv) != 2:
        return False
    return {
        'in_file': sys.argv[1],
        'out_file': 'modified-' + sys.argv[1],
    }


def set_new_em(font):
    '''
    This sets new ascent & descent and scale glyphs.  This sets new ascent &
    descent before it sets em.  When in inverse, it does not change ascent &
    descent.
    '''
    font.selection.all()
    font.unlinkReferences()
    font.ascent = float(ASCENT) / EM * OLD_EM
    font.descent = float(DESCENT) / EM * OLD_EM
    font.em = EM


def set_proportion(font):
    scale = psMat.scale(SCALE_DOWN)
    font.selection.all()
    for glyph in list(font.selection.byGlyphs):
        is_hankaku_kana = glyph.encoding in range(*HANKAKU_KANA)
        x_to_center = X_TO_CENTER / 2 if is_hankaku_kana else X_TO_CENTER
        trans = psMat.translate(x_to_center, 0)
        mat = psMat.compose(scale, trans)
        glyph.transform(mat)
        glyph.width = EM / 2 if is_hankaku_kana else EM


def main():
    opts = read_opts()
    if not opts:
        return 1
    font = fontforge.open(opts['in_file'])
    set_new_em(font)
    set_proportion(font)
    print('Generate ' + opts['out_file'])
    font.generate(opts['out_file'], flags=('opentype',))
    return 0


if __name__ == '__main__':
    sys.exit(main())
