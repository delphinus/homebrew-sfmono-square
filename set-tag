#!/usr/bin/env perl
use v5.14;
use warnings;

die unless defined $ARGV[0];
my $version = "0.1.$ARGV[0]";
my $patcher = 'src/font-patcher';
my $formula = 'sfmono-square.rb';
update_file($patcher, sub {
    ($_) = @_;
    s/'.*'/'v$version'/ if /^version =/;
    $_;
});
cmd('git', 'add', $patcher);
cmd('git', 'commit', '-m', "Bump version up to v$version in patcher");
cmd('git', 'tag', "v$version");
cmd('git', 'push', '--tags');
my $hash;
update_file($formula, sub {
    ($_) = @_;
    if (/^  url/) {
        s,[^/]+"$,v$version.tar.gz",;
        my ($url) = /url "(.*)"/;
        $hash = cmd_out('curl', '-L', $url, '|', 'shasum', '-a256');
        $hash =~ s/\s.*//s;
    }
    elsif (/^  sha256/) { s/".*"/"$hash"/ }
    elsif (/^  version/) { s/".*"/"$version"/ }
    $_;
});
cmd('git', 'add', $formula);
cmd('git', 'commit', '-m', 'Update formula to use new version');
cmd('git', 'push', 'origin', 'master');

sub cmd {
    local $, = ' ';
    say @_;
    system @_;
}

sub cmd_out {
    local $, = ' ';
    say @_;
    `@_`;
}

sub update_file {
    my ($filename, $cb) = @_;
    open my $in, '<', $filename or die;
    my $old = do { local $/; <$in> };
    close $in;
    open my $out, '>', $filename or die;
    for my $line (split /\n/, $old) {
        $out->say($cb->($line));
    }
    close $out;
}
