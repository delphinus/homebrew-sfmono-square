.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 "2023-05-06" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
convert_codepoints \- convert files according to changes in SF Mono Square
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # convert all files below the current directory
\&    # from v2 => v3 (default values)
\&    % bin/convert_codepoints .
\&
\&    # specify versions
\&    % bin/convert_codepoints \-f v1 \-t v3 .
\&
\&    # specify a file
\&    % bin/convert_codepoints \-f v1 \-t v3 /path/to/file
\&
\&    # not show diffs, but execute
\&    % bin/convert_codepoints \-e
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a script to convert glyphs in your dotfiles according to versions of \s-1SF\s0
Mono Square. Now this font has 3 versions that has some codepoints without
compatibility. This script can search a supplied directory or file and convert
characters that have such codepoints according to supplied options.
.PP
Here is an outline of changes in v1, v2, v3, nerd-fonts v2 and nerd-fonts v3.
.SS "v1"
.IX Subsection "v1"
Material glyphs in U+F500 .. U+F8FF and U+E800 .. U+EC46. They overwrites Apple
glyphs (U+F6D5 .. U+F6D8, U+F8FF), so v1 has no such ones.
.PP
Also, there are no glyphs from Codicons.
.SS "v2"
.IX Subsection "v2"
To use Apple glyphs, some glyphs in Material have moved.
.PP
.Vb 2
\&    U+F6D5 .. U+F6D8 => U+FF6D5 .. U+FF6D8
\&    U+F8FF => U+FF8FF
.Ve
.PP
So this time Material glyphs in U+F500 .. U+F6D4, U+FF6D5 .. U+FF6D8, U+F6D9 =>
U+F8FE, U+E800 .. U+EC46.
.PP
Now v2 has Codicons glyphs in U+FEA60 .. U+FEBEB not to overwrite Material ones.
.SS "v3"
.IX Subsection "v3"
v3 uses completely the same codepoints as nerd-fonts v3 ones.
.PP
.Vb 3
\&    Material => U+F0001 .. U+F1AF0
\&    Apple    => U+F6D5 .. U+F6D8, U+F8FF
\&    Codicons => U+EA60 .. U+EBEB
.Ve
.SS "nerd-fonts v2"
.IX Subsection "nerd-fonts v2"
nerd-fonts v2 has errros on codepoints. That overwrites some codepoints except
\&\s-1PUA\s0 (Private \s-1USE\s0 Area \- U+E000 .. U+F8FF).
.SS "nerd-fonts v3"
.IX Subsection "nerd-fonts v3"
This solves errors above. It uses the same as \*(L"v3\*(R".
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-from\fR \fIversion\fR, \fB\-f\fR \fIversion\fR" 4
.IX Item "--from version, -f version"
This specifies a version string to convert from. This accepts \f(CW"v1"\fR, \f(CW"v2"\fR,
\&\f(CW"v3"\fR, \f(CW"nerd_fonts_v2"\fR or \f(CW"nerd_fonts_v3"\fR. \f(CW"nerd_fonts_XX"\fR means the
codepoints from nerd-fonts.
.Sp
Default: \f(CW"v2"\fR
.IP "\fB\-\-to\fR \fIversion\fR, \fB\-t\fR \fIversion\fR" 4
.IX Item "--to version, -t version"
This is the one to convert to.
.Sp
Default: \f(CW"v3"\fR
.IP "\fB\-\-ignore\-regex\fR \fIregex\fR, \fB\-r\fR \fIregex\fR" 4
.IX Item "--ignore-regex regex, -r regex"
Ignore files matched this RegEx (Perl style).
.Sp
Default: \f(CW\*(C`undef\*(C'\fR
.IP "\fB\-\-max\-files\fR \fIcount\fR" 4
.IX Item "--max-files count"
Finish if the file count is over this.
.Sp
Default: \f(CW1000\fR
.IP "\fB\-\-max\-size\fR \fIsize\fR" 4
.IX Item "--max-size size"
Ignore if the file is larger than this bytes.
.Sp
Default: \f(CW1000000\fR (1MB)
.IP "\fB\-\-submodules\fR" 4
.IX Item "--submodules"
Search files in submodules.
.IP "\fB\-\-gitignore\fR" 4
.IX Item "--gitignore"
Consider \f(CW\*(C`.gitignore\*(C'\fR file.
.IP "\fB\-\-execute\fR, \fB\-e\fR" 4
.IX Item "--execute, -e"
Without this, it prints the diff only.
.IP "\fB\-\-help\fR, \fB\-h\fR" 4
.IX Item "--help, -h"
Show this document and exit.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2023 \s-1JINNOUCHI\s0 Yasushi <me@delphinus.dev>
.PP
This library is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "<https://github.com/delphinus/homebrew\-sfmono\-square>" 4
.IX Item "<https://github.com/delphinus/homebrew-sfmono-square>"
.PD 0
.IP "<https://www.nerdfonts.com>" 4
.IX Item "<https://www.nerdfonts.com>"
